{"version":3,"sources":["App.js","index.js"],"names":["ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","API_KEY","API_BASE_URL","App","darkMode","setDarkMode","useState","symbol","setSymbol","startDate","setStartDate","Date","now","endDate","setEndDate","stocks","setStocks","chartData","setChartData","labels","datasets","chartRef","useRef","useEffect","document","body","classList","toggle","updateChartData","_stocks$","newChartData","data","map","d","date","flatMap","stock","index","label","price","borderColor","backgroundColor","yAxisID","tension","volume","chartOptions","responsive","animation","duration","easing","animations","x","type","from","NaN","delay","ctx","xStarted","y","yStarted","scales","title","display","text","color","ticks","grid","position","y1","drawOnChartArea","plugins","legend","tooltip","titleColor","bodyColor","React","createElement","className","onSubmit","e","preventDefault","find","s","async","timeSeries","axios","get","params","function","apikey","stockData","Object","entries","filter","_ref","_ref2","values","parseFloat","parseInt","reverse","prevStocks","error","console","fetchStockData","value","onChange","target","toUpperCase","placeholder","DatePicker","selected","Line","ref","options","key","length","latestData","previousData","change","changePercent","toFixed","toLocaleString","onClick","symbolToRemove","handleRemoveStock","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.22b76c68.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport DatePicker from 'react-datepicker';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './App.css';\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst API_KEY = '3ZM7KLC6GXCWKKH';\r\nconst API_BASE_URL = 'https://www.alphavantage.co/query';\r\n\r\nfunction App() {\r\n  const [darkMode, setDarkMode] = useState(false);\r\n  const [symbol, setSymbol] = useState('');\r\n  const [startDate, setStartDate] = useState(new Date(Date.now() - 30 * 24 * 60 * 60 * 1000));\r\n  const [endDate, setEndDate] = useState(new Date());\r\n  const [stocks, setStocks] = useState([]);\r\n  const [chartData, setChartData] = useState({ labels: [], datasets: [] });\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    document.body.classList.toggle('dark-mode', darkMode);\r\n    updateChartData();\r\n  }, [darkMode, stocks]);\r\n\r\n  const fetchStockData = async () => {\r\n    try {\r\n      const response = await axios.get(API_BASE_URL, {\r\n        params: {\r\n          function: 'TIME_SERIES_DAILY',\r\n          symbol: symbol,\r\n          apikey: API_KEY,\r\n        },\r\n      });\r\n      const timeSeries = response.data['Time Series (Daily)'];\r\n      const stockData = Object.entries(timeSeries)\r\n        .filter(([date]) => new Date(date) >= startDate && new Date(date) <= endDate)\r\n        .map(([date, values]) => ({\r\n          date,\r\n          price: parseFloat(values['4. close']),\r\n          volume: parseInt(values['5. volume']),\r\n        }))\r\n        .reverse();\r\n\r\n      setStocks(prevStocks => [...prevStocks, { symbol, data: stockData }]);\r\n    } catch (error) {\r\n      console.error('Error fetching stock data:', error);\r\n    }\r\n  };\r\n\r\n  const updateChartData = () => {\r\n    const newChartData = {\r\n      labels: stocks[0]?.data.map(d => d.date) || [],\r\n      datasets: stocks.flatMap((stock, index) => [\r\n        {\r\n          label: `${stock.symbol} Price`,\r\n          data: stock.data.map(d => d.price),\r\n          borderColor: `hsl(${index * 137.5}, 70%, 50%)`,\r\n          backgroundColor: `hsla(${index * 137.5}, 70%, 50%, 0.5)`,\r\n          yAxisID: 'y',\r\n          tension: 0.1,\r\n        },\r\n        {\r\n          label: `${stock.symbol} Volume`,\r\n          data: stock.data.map(d => d.volume),\r\n          borderColor: `hsl(${index * 137.5 + 60}, 70%, 50%)`,\r\n          backgroundColor: `hsla(${index * 137.5 + 60}, 70%, 50%, 0.5)`,\r\n          yAxisID: 'y1',\r\n          tension: 0.1,\r\n        }\r\n      ]),\r\n    };\r\n    setChartData(newChartData);\r\n  };\r\n\r\n  const handleAddStock = (e) => {\r\n    e.preventDefault();\r\n    if (symbol && !stocks.find(s => s.symbol === symbol)) {\r\n      fetchStockData();\r\n      setSymbol('');\r\n    }\r\n  };\r\n\r\n  const handleRemoveStock = (symbolToRemove) => {\r\n    setStocks(prevStocks => prevStocks.filter(s => s.symbol !== symbolToRemove));\r\n  };\r\n\r\n  const chartOptions = {\r\n    responsive: true,\r\n    animation: {\r\n      duration: 1000,\r\n      easing: 'easeInOutQuad',\r\n    },\r\n    animations: {\r\n      x: {\r\n        type: 'number',\r\n        easing: 'linear',\r\n        duration: 1000,\r\n        from: NaN,\r\n        delay(ctx) {\r\n          if (ctx.type !== 'data' || ctx.xStarted) {\r\n            return 0;\r\n          }\r\n          ctx.xStarted = true;\r\n          return ctx.index * 10;\r\n        }\r\n      },\r\n      y: {\r\n        type: 'number',\r\n        easing: 'linear',\r\n        duration: 1000,\r\n        delay(ctx) {\r\n          if (ctx.type !== 'data' || ctx.yStarted) {\r\n            return 0;\r\n          }\r\n          ctx.yStarted = true;\r\n          return ctx.index * 10;\r\n        }\r\n      }\r\n    },\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: true,\r\n          text: 'Date',\r\n          color: darkMode ? 'white' : 'black'\r\n        },\r\n        ticks: {\r\n          color: darkMode ? 'white' : 'black'\r\n        },\r\n        grid: {\r\n          color: darkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'\r\n        }\r\n      },\r\n      y: {\r\n        type: 'linear',\r\n        display: true,\r\n        position: 'left',\r\n        title: {\r\n          display: true,\r\n          text: 'Price ($)',\r\n          color: darkMode ? 'white' : 'black'\r\n        },\r\n        ticks: {\r\n          color: darkMode ? 'white' : 'black'\r\n        },\r\n        grid: {\r\n          color: darkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'\r\n        }\r\n      },\r\n      y1: {\r\n        type: 'linear',\r\n        display: true,\r\n        position: 'right',\r\n        title: {\r\n          display: true,\r\n          text: 'Volume',\r\n          color: darkMode ? 'white' : 'black'\r\n        },\r\n        ticks: {\r\n          color: darkMode ? 'white' : 'black'\r\n        },\r\n        grid: {\r\n          drawOnChartArea: false,\r\n          color: darkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        labels: {\r\n          color: darkMode ? 'white' : 'black'\r\n        }\r\n      },\r\n      tooltip: {\r\n        backgroundColor: darkMode ? 'rgba(0, 0, 0, 0.7)' : 'rgba(255, 255, 255, 0.7)',\r\n        titleColor: darkMode ? 'white' : 'black',\r\n        bodyColor: darkMode ? 'white' : 'black'\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>Stock Market Dashboard</h1>\r\n       \r\n      </header>\r\n      <main>\r\n        <form onSubmit={handleAddStock} className=\"controls\">\r\n          <input\r\n            type=\"text\"\r\n            value={symbol}\r\n            onChange={(e) => setSymbol(e.target.value.toUpperCase())}\r\n            placeholder=\"Enter stock symbol (e.g., AAPL)\"\r\n          />\r\n          <div className=\"date-picker\">\r\n            <label>Start Date:</label>\r\n            <DatePicker selected={startDate} onChange={date => setStartDate(date)} />\r\n          </div>\r\n          <div className=\"date-picker\">\r\n            <label>End Date:</label>\r\n            <DatePicker selected={endDate} onChange={date => setEndDate(date)} />\r\n          </div>\r\n          <button type=\"submit\">Add Stock</button>\r\n        </form>\r\n        <div className=\"chart-container\">\r\n          <Line ref={chartRef} data={chartData} options={chartOptions} key={stocks.length} />\r\n        </div>\r\n        <table className=\"stock-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Symbol</th>\r\n              <th>Latest Price</th>\r\n              <th>Change</th>\r\n              <th>Change Percent</th>\r\n              <th>Volume</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {stocks.map(stock => {\r\n              const latestData = stock.data[stock.data.length - 1];\r\n              const previousData = stock.data[stock.data.length - 2];\r\n              const change = latestData.price - previousData.price;\r\n              const changePercent = (change / previousData.price) * 100;\r\n              return (\r\n                <tr key={stock.symbol}>\r\n                  <td>{stock.symbol}</td>\r\n                  <td>${latestData.price.toFixed(2)}</td>\r\n                  <td className={change >= 0 ? 'positive' : 'negative'}>\r\n                    {change.toFixed(2)}\r\n                  </td>\r\n                  <td className={change >= 0 ? 'positive' : 'negative'}>\r\n                    {changePercent.toFixed(2)}%\r\n                  </td>\r\n                  <td>{latestData.volume.toLocaleString()}</td>\r\n                  <td>\r\n                    <button onClick={() => handleRemoveStock(stock.symbol)}>Remove</button>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);"],"sourceRoot":""}